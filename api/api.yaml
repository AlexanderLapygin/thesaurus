openapi: 3.0.2
info:
  title: Thesaurus Service API
  description: API used as sample during the Blog Posts series talking about API Design.
  version: 1.0.0
  contact:
    email: alexanderlapygin@gmail.com
    name: Alexander Lapygin
    url: 'https://github.com/AlexanderLapygin'
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/nicolastakashi/todoapp-openapidocuments/master/LICENSE'
servers:
  - url: 'http://127.0.0.1:4010'
    description: Mock Server
tags:
  - name: Authentication
  - name: CRUD
paths:
  /terms:
    get:
      operationId: getTerms
      summary: Returns a paged list of terms.
      description: Returns a paged list of terms
      tags:
        - CRUD
      parameters:
        - in: query
          description: Desired page
          name: page
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - in: query
          description: Desired quantity of itens per page
          name: pageSize
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 10
            maximum: 100
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedTerm'
        '500':
          description: Unexpected error
    post:
      operationId: createTerm
      summary: Create a term
      description: Create a new term
      tags:
        - CRUD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: 'Location of the created term /terms/{id}'
              example: 'http://127.0.0.1:4010/terms/0301f2cb-0a7f-c41f-aa7a-da9b8ba2f1bb'
              schema:
                type: string
                format: uri
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error
  '/terms/{id}':
    get:
      operationId: getTerm
      summary: Get term by id
      description: Return a term
      tags:
        - CRUD
      parameters:
        - in: path
          name: id
          description: Term id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '404':
          description: Term not found
          content: {}
        '500':
          description: Unexpected error
    put:
      operationId: updateTerm
      summary: Update a term
      description: Update a term
      tags:
        - CRUD
      parameters:
        - in: path
          name: id
          description: Term id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Term not found
          content: {}
        '500':
          description: Unexpected error
    delete:
      operationId: deleteTerm
      summary: Delete a term
      description: Delete a term
      tags:
        - CRUD
      parameters:
        - in: path
          name: id
          description: Term id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '500':
          description: Unexpected error
components:
  schemas:
    Term:
      type: object
      required:
        - designation
      properties:
        id:
          description: Term unique identifier
          type: string
          format: uuid
          readOnly: true
        designation:
          description: Term name
          type: string
          example: technology
    PagedTerm:
      type: object
      properties:
        total:
          type: integer
          format: int32
          minimum: 0
        totalOfPages:
          type: integer
          format: int32
          minimum: 0
        values:
          type: array
          items:
            $ref: '#/components/schemas/Term'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
